# Generated by Django 4.2.2 on 2024-02-23 03:02

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields


class Migration(migrations.Migration):

    # replaces = [
    #     ("site_settings", "0001_initial"),
    #     ("site_settings", "0002_tokens"),
    #     ("site_settings", "0003_remove_mostpopularposts_site_and_more"),
    #     ("site_settings", "0004_alter_tokens_id"),
    #     ("site_settings", "0005_alter_tokens_facebook_app_id_and_more"),
    #     ("site_settings", "0006_product"),
    #     ("site_settings", "0007_tokens_openai"),
    #     ("site_settings", "0008_product_image"),
    #     ("site_settings", "0009_delete_product"),
    #     ("site_settings", "0010_templatetext_templatetextsetitem_and_more"),
    #     (
    #         "site_settings",
    #         "0011_remove_templatetextsetitem_unique_set_template_tag_and_more",
    #     ),
    # ]

    initial = True

    dependencies = [
        ("wagtailcore", "0076_modellogentry_revision"),
        ("wagtailimages", "0025_alter_image_file_alter_rendition_file"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tokens",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mapbox",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Mapbox Access Token",
                    ),
                ),
                (
                    "google_analytics",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Google Analytics Site ID",
                    ),
                ),
                (
                    "facebook_app_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Facebook App ID",
                    ),
                ),
                (
                    "fontawesome",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="FontAwesome Kit ID",
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
                (
                    "openai",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="OpenAI Key"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TemplateText",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "template_set",
                    models.CharField(
                        help_text="The set needs to be loaded in template tags then text references as {{set.tag}}",
                        max_length=50,
                        unique=True,
                        verbose_name="Set Name",
                    ),
                ),
            ],
            options={
                "verbose_name": "Template Text",
            },
        ),
        migrations.CreateModel(
            name="TemplateTextSetItem",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "template_tag",
                    models.CharField(
                        help_text="Enter a tag without spaces, consisting of lowercase letters, numbers, and underscores.\nThe first character must be a lowercase letter.",
                        max_length=50,
                        verbose_name="Template Tag",
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        blank=True,
                        help_text="The text to be inserted in the template.",
                        null=True,
                    ),
                ),
                (
                    "set",
                    modelcluster.fields.ParentalKey(
                        help_text="Template Set to which this item belongs.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="templatetext_items",
                        to="site_settings.templatetext",
                        verbose_name="Set Name",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="templatetextsetitem",
            constraint=models.UniqueConstraint(
                fields=("set", "template_tag"), name="unique_set_template_tag"
            ),
        ),
        migrations.RemoveConstraint(
            model_name="templatetextsetitem",
            name="unique_set_template_tag",
        ),
        migrations.AlterUniqueTogether(
            name="templatetextsetitem",
            unique_together={("set", "template_tag")},
        ),
    ]
